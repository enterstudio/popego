from sqlalchemy.orm import mapper
from datetime import datetime
from dbsetup import DBSetup
from twisted.python import log

class Job(object):
    def __init__(self, type, data=None):
        self.type = type
        self.data = data
        self.creation_date = datetime.now()

    def __repr__(self):
        return "<Job(%s - %s)>" % (self.type, self.creation_date)


mapper(Job, DBSetup().jobs)

class JobScheduler(object):
    def __init__(self):
        self.session = DBSetup().Session()
        self.consumers = set()
        self.idleConsumers = set()

    def addJob(self, type,data):
        """Adds a new Job to the JobQueue"""
        job = Job(type,data)
        log.msg("Job added to Queue: %s" % job)
        self.session.save(job)
        self.session.commit()
        self.dispatchPending()
        
    def dispatchPending(self):
        """Dispatchs Pending Jobs to Idle JobConsumers"""
        pendingJobs = self._getPendingJobs()
        
        while len(self.idleConsumers) > 0 and len(pendingJobs) >0:
            consumer = self.idleConsumers.pop()
            job = pendingJobs.pop()
            job.started_date = datetime.now()
            log.msg("Job %s assigned to consumer %s" % (job, consumer))
            consumer.performJob(job, self._jobFinished)
        
        self.session.commit()

    def _getPendingJobs(self):
        jobs = self.session.query(Job).filter(Job.started_date==None) \
            .order_by(Job.creation_date.asc()).all()
        return jobs
        

    def addConsumer(self, jobConsumer):
        """Adds a JobConsumer to the JobScheduler"""
        self.consumers.add(jobConsumer)
        self.idleConsumers.add(jobConsumer)

    def _jobFinished(self, consumer, job, error):
        """Event listener, to deal with finished jobs"""
        job.ended_date = datetime.now()
        job.error = error
        log.msg("Job %s finished" % job)
        self.idleConsumers.add(consumer)
        self.session.commit()
        self.dispatchPending()
