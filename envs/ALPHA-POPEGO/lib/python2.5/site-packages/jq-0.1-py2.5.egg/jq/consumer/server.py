from twisted.internet import protocol
from jq.common import VariablePacketProtocol
from jq.consumer.agentDispatcher import AgentSynchronizer
import pickle, traceback
from twisted.python import log
from twisted.internet import threads

class JobConsumerProtocol(VariablePacketProtocol):

    def packetRecieved(self, packetData):

        def cb(result):
            """ Callback para el deferred """
            log.msg('job `%s - %s` finished successfully' % (type, data))
            self.sendPacket(pickle.dumps(None))
            
        def eb(failure):
            """ Errback para el deferred """
            log.msg('job `%s - %s` finished with error' % (type, data))
            tb = failure.getTraceback(elideFrameworkCode=1)
            log.msg(tb)
            self.sendPacket(pickle.dumps(tb))
 
        type, data = pickle.loads(packetData)

        deferred = self.factory.dispatchJob(type, data)
        deferred.addCallback(cb)
        deferred.addErrback(eb)

class JobConsumerFactory(protocol.ServerFactory):
    protocol = JobConsumerProtocol

    def dispatchJob(self, type, data):
        log.msg("Dispatching Job (asynchronously): %s - %s" % (type, data))
        d = threads.deferToThread(self._importAccount, data)
        return d

    def _importAccount(self, data):
        return AgentSynchronizer().importAccount(data)

    
