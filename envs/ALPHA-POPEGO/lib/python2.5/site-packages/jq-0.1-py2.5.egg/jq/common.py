from twisted.internet.protocol import Protocol

class VariablePacketProtocol(Protocol):

    def __init__(self):
        self.buffer = ""
        self.inHeader = True
        self.headerLen = 10

    def dataReceived(self, data):
        self.buffer += data

        if self.inHeader and len(self.buffer) >= self.headerLen:
            self.inHeader = False
            self.bodyLen = int(self.buffer[0:self.headerLen])
            self.buffer = self.buffer[self.headerLen:]

        if not self.inHeader:
            if (len(self.buffer) >= self.bodyLen):
                packetData = self.buffer[0:self.bodyLen]
                self.buffer = self.buffer[self.bodyLen:]
                self.inHeader = True
                self.packetRecieved(packetData)

    def sendPacket(self, packetData):
        dataLen = len(packetData)
        if (dataLen > 9999999999):
            raise error
    
        packet = "%010d%s" % (dataLen,packetData)
        self.transport.write(packet)
